[tool.poetry]
name = "JuniorSeniorSupport"
version = "0.1.0"
description = "FastAPI backend"
authors = ["Daniel Balzhyk <danya2zxc@gmail.com>"]
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = ">=3.11,<4.0"
fastapi = {extras = ["standard"], version = "*"}
sqlalchemy = ">=2.0"
alembic = "*"
celery = "==5.5.0"
passlib = {extras = ["bcrypt"], version = "==1.7.4"}
pyjwt = "*"
pydantic = ">=2.0"
pydantic-settings = ">=2.0"
psycopg2-binary = "*"
gunicorn = "==22.0.0"
asyncpg = "^0.30.0"
bcrypt = "4.3.0"
fastapi-mail = "^1.5.0"
redis={extras =["hiredis"],version = "~=5.0"}
openai = "^1.93.0"
httpx = "^0.28.1"




[tool.poetry.group.dev.dependencies]
black = "~=24.3.0"
isort = "~=5.13.2"
ruff = "~=0.3.3"
pre-commit = "*"
watchdog = "^6.0.0"
pytest-dotenv = "^0.5.2"
pytest-asyncio = "^1.0.0"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    env_list =
        py311
    skipsdist = true
    basepython = python3.11

    [testenv]
    deps = -rrequirements/dev.txt
    allowlist_externals = make
    commands = make check
"""



[tool.pip-tools]
generate_hashes = true


[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = ["E", "F"]
lint.ignore = []


# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".mypy_cache",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "__pycache_",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
    "Makefile",
    "migrations",
    "alembic/versions"
]


# Same as Black.
line-length = 79

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10



[tool.black]
target-version = ['py311']
line-length = 79
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
    | alembic/versions
  )/
    # the root of the project
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 79
skip = '.venv,venv,env'
src_paths = ["src"]

[tool.pytest.ini_options]
pythonpath = '.'
env_files = [".test.env"]

addopts = '-s -v --cache-clear'
asyncio_mode = 'auto'
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
cache_dir = '/tmp'
python_files = 'tests.py test_*.py *_test.py'
python_functions = 'test_* *_test'
filterwarnings = ['ignore::RuntimeWarning', 'ignore::UserWarning', "ignore:'crypt' is deprecated:DeprecationWarning",]

[tool.coverage.run]
omit = ["*/conftest.py", "*/test_*.py", "*/migrations/"]

# [tool.mypy]
# plugins = ["pydantic.mypy"]
# python_version = '3.11'
# files = ['*.py']
# warn_redundant_casts = true
# warn_unused_ignores = true
# show_error_codes = true
# namespace_packages = true
# exclude = ["migrations"]
# follow_imports = 'silent'


# Silint "type import errors" as our 3rd-party libs does not have types
# Check: https://mypy.readthedocs.io/en/latest/config_file.html#import-discovery


[tool.pyright]
exclude = ["**/__pycache__", "**/venv/*", "**/migrations/*"]
typeCheckingMode = "basic"                                   # off, basic, strict
useLibraryCodeForTypes = true
